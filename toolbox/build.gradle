
plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    namespace 'com.threshold.toolbox'
    compileSdk rootProject.ext.compile_sdk_version

    defaultConfig {
        minSdkVersion rootProject.ext.min_sdk_version
        //noinspection OldTargetApi
        targetSdkVersion rootProject.ext.target_sdk_version

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndkVersion rootProject.ext.ndk_version
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_TOOLCHAIN=clang"
                        "-DANDROID_STL=c++_static"
//                "-DPRJ_VERSION_CODE=$svnRev",
//                "-DPRJ_BUILD_TIME=$buildTimeStamp"
                cFlags "-g -Wall"
// -Wreturn-type-c-linkage -Wpointer-arith -ftrapv -fsanitize=undefined-trap -fsanitize-undefined-trap-on-error
                cppFlags "-frtti -fexceptions -fpermissive -v"
            }
            ndk {
                abiFilters  'armeabi-v7a', 'arm64-v8a','x86','x86_64'//,'mips','mips64','armeabi',
            }
        }
    }
    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
//                    arguments += "-DMY_BUILD_TYPE=DEBUG"
//                    cFlags += "-O0"
//                    targets "toolbox", "local_socket_server"
                }
            }
        }
        release {
            externalNativeBuild {
                cmake {
//                    arguments += "-DMY_BUILD_TYPE=RELEASE"
                    cFlags += "-Os"
//                     targets "toolbox", "local_socket_server"
                }
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        jniLibs {
            keepDebugSymbols += ['**/*.so']
        }
        resources {
            excludes += ['META-INF/services/javax.annotation.processing.Processor',
                         'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES',
                         'META-INF/MANIFEST.MF', 'META-INF/LICENSE.txt', 'META-INF/LICENSE',
                         'META-INF/NOTICE.txt', 'META-INF/ASL2.0',
                         'META-INF/NOTICE', 'META-INF/LGPL2.1']
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'InvalidPackage', 'OldTargetApi'
        ignoreWarnings true
        quiet true
    }

}


tasks.register('testJar', Jar) {
//    classifier = 'tests'
//    from android.sourceSets.test.output
//    from project.buildDir.absolutePath + "/intermediates/javac/debug/compileDebugJavaWithJavac/classes"
    from project.buildDir.absolutePath + "/intermediates/javac/debugAndroidTest/compileDebugAndroidTestJavaWithJavac/classes"
    //    //去除路径集下部分的资源
    exclude "**/R.class"
    exclude "**/R\$*.class"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.0'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.ext.kotlin_version}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20240303'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}
