import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

static def formatDateTime(){
    return new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
}

android {
    namespace 'com.threshold.mytoolbox'

    compileSdkVersion 33
    defaultConfig {
        applicationId "com.threshold.mytoolbox"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                //如果so库需要使用C++运行环境，需要添加gnustl_static，这个适用于NDK-16b及以下.最新版的NDK不支持，编译报错。只能为应用选择一个运行时
//                "-DANDROID_STL=c++_shared"
//                arguments "-DANDROID_STL=c++_static", "-DANDROID_PLATFORM=android-19", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                cFlags "-g -Wall"
                cppFlags "-frtti -fexceptions -v"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a','arm64-v8a'//,'x86','x86_64'//,'mips','mips64'
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
//                    arguments += "-DMY_BUILD_TYPE=DEBUG"
                    cFlags += "-Og"
//                    targets "native-lib", "native-resample"
                }
            }
        }
        release {
            externalNativeBuild {
                cmake {
//                    arguments += "-DMY_BUILD_TYPE=RELEASE"
//                    cFlags += "-Os"
//                     targets "native-lib", "native-resample"
                }
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    packagingOptions {
        jniLibs {
            keepDebugSymbols += ['**/*.so']
        }
        resources {
            excludes += ['META-INF/services/javax.annotation.processing.Processor', 'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES', 'META-INF/MANIFEST.MF', 'META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/NOTICE.txt', 'META-INF/ASL2.0', 'META-INF/NOTICE', 'META-INF/LGPL2.1']
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'InvalidPackage', 'OldTargetApi'
        ignoreWarnings true
        quiet true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                outputFileName = "MyToolBox_${variant.buildType.name}.apk"
            } else {
                outputFileName = "MyToolBox_${variant.buildType.name}_${formatDateTime()}.apk"
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20180813'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation project(':toolbox')
    //for call public hidden api purpose.
//    compileOnly files("libs/android-19.jar")
}
